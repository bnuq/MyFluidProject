#version 460 core

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;



// Particle Data
    uniform uint TotalParticleCount;
    uniform vec3 LimitRange;

// Delta Time
    uniform float deltaTime;

// Collision
    uniform float damping;




/*
    [Particle]                  [Core Particle]

    position                    new position

    velocity                    new velocity

                                new toOrigin
    range                       
    density                     
    pressure                    

    force                   
    neighbor                    

    surfNormal
    isSurface
 */
struct CoreParticle
{
    float xpos;
    float ypos;
    float zpos;

    float xvel;
    float yvel;
    float zvel;

    float toOrigin;
};
layout(std430, binding = 1) buffer CoreParticleBuffer
{
    CoreParticle cData[];
};



struct Particle
{
    vec4 position;

    vec4 velocity;

    uvec2 range;
    float density;
    float pressure;

    vec3 force;
    uint neighbor;
    
    vec3 surfNormal;
    uint isSurface;
};
layout(std430, binding = 2) buffer ParticleBuffer
{
    Particle pData[];
};



void main()
{
    // 동일하게 하나의 그룹은 x 축 방향만 가지고 있고, x 축 방향 그룹만 존재한다고 생각
    uint index = gl_GlobalInvocationID.x;
    // 해당하는 particle 이 없으면 종료
    if(index >= TotalParticleCount) return;



    // 알짜힘 -> 속도 변화 -> 위치 변화
    pData[index].velocity.xyz += deltaTime * (pData[index].force.xyz / pData[index].density);
    pData[index].position.xyz += deltaTime * pData[index].velocity.xyz;


    /* 
        새롭게 구한 위치에 대해서 <- 경계를 벗어났는 지 체크
        벗어난 경우
            위치 => 경계 내부로 되돌리고
            속도 => 내부를 향하는 속도를 가지게 한다 + 속도의 크기를 줄인다( 충돌 했으니까 )
     */
    // OverVec => 경계면에서 벗어난 particle 이 경계면을 향하는 벡터
    vec3 OverVec = vec3(0, 0, 0);

    // 경계를 벗어난 경우를 찾고, 그에 맞게 돌아가야 하는 방향을 찾는다
    // 경계 = (0, 0, 0) ~ LimitRange
    if     (pData[index].position.x < 0)                    OverVec.x -= pData[index].position.x;
    else if(pData[index].position.x > LimitRange.x)         OverVec.x += LimitRange.x - pData[index].position.x;
    
    if     (pData[index].position.y < 0)                    OverVec.y -= pData[index].position.y;
    else if(pData[index].position.y > LimitRange.y)         OverVec.y += LimitRange.y - pData[index].position.y;

    if     (pData[index].position.z < 0)                    OverVec.z -= pData[index].position.z;
    else if(pData[index].position.z > LimitRange.z)         OverVec.z += LimitRange.z - pData[index].position.z;

    
    // 들어오는 벡터가 0 이 아닌 경우 == 경계를 벗어난 경우
    if(length(OverVec) != 0)
    {
        // 위치 => 강제로 내부로 들어오게 하고
        pData[index].position.xyz += (1.001) * OverVec;

        // 속도 => OverVec 를 법선벡터로, 기존의 속도를 반사시키자
        // 충돌로 인해 속도가 줄어들테니, damping 값으로 조절한다
        pData[index].velocity.xyz = reflect(pData[index].velocity.xyz, normalize(OverVec)) * damping;
    }



    // 1. update position
    cData[index].xpos = pData[index].position.x;
    cData[index].ypos = pData[index].position.y;
    cData[index].zpos = pData[index].position.z;

    
    // 2. update velocity    
    cData[index].xvel = pData[index].velocity.x;
    cData[index].yvel = pData[index].velocity.y;
    cData[index].zvel = pData[index].velocity.z;


    // 3. update toOrigin
    // toOrigin = 파티클 위치에서 원점까지의 거리 = 위치 좌표를 이용해서 구할 수 있다
    cData[index].toOrigin = length(pData[index].position.xyz);
}