#version 460 core

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;


// Uniform Variables
// 0
// Smooth Kernel 관련 정보
    uniform float h;
    uniform float hSquare;

    // Particles 에 대한 정보
    uniform float particleMass;
    uniform uint particleCount;

// 1
    // 점성에 의한 힘
    uniform float viscosity;

    // 표면 장력 관련
    uniform float threshold;
    uniform float surfCoeffi;


// 2 => Extra Force
    uniform vec3 gravityAcel;

    uniform vec2 mouseForce;
    
    uniform float xRange;
    uniform float yRange;
    uniform float time;
    uniform float wavePower;

    

    //smooth kernel 함수들 => 일단 함수로 쓰고, 나중에 MACRO 로 바꿔보자
    #define PI 3.1415
    /* 
        Grad_W_Poly6 -> r 제곱을 변수로 사용
                    -> gradient 결과 상대 particle 을 가리키는 벡터를 가진다
                    -> 이 함수는 크기만 계산
        사용처
            : surface normal filed pointing into the fluid 계산
    */
    float Grad_W_Poly6(float r2) { return (315.0 * (-6.0) / (64.0 * PI * pow(abs(h), 9))) * pow(abs(hSquare - r2), 2); }
    /* 
        Laplace_W_Poly6 -> r 제곱을 사용
        사용처
            : curvature of the surface 계산
    */
    float Laplace_W_Poly6(float r2) { return (315.0 / (64 * PI * pow(abs(h), 9))) * ((-18) * pow(abs(hSquare - r2), 2) + 24 * r2 * (hSquare - r2)); }
    /* 
        Grad_W_Spiky -> r 을 사용
                    -> particle 에서 다른 particle 을 향하는 방향을 가진다 => normalized vector
                    -> 이 함수는 단위벡터를 제외한 크기만 계산
        사용처
            : 압력에 의한 힘 계산
    */
    float Grad_W_Spiky(float r) { return (-45.0 / ( PI * pow(abs(h), 6) )) * (pow(abs(h - r), 2)); }
    /* 
        Laplace_W_Viscosity -> r 사용
        사용처
            : 점성에 의한 힘 계산
    */
    float Laplace_W_Viscosity(float r) { return (45.0 / (PI * pow(abs(h), 6))) * (h - r); }





/*
    여전히 정렬된 배열 ParticleBuffer
        파티클 ~ 카메라 거리, toCamera 값으로 정렬
        Far -> Near 순서로 정렬

    position;                   position

    velocity;                   velocity

    range                       range
    density                     density
    pressure                    pressure


    -               =>          force               = pressure force + viscosity force (Update_Fluid_Force)
                                                    + Surface Force => 표면이라는 게 확정이 되면
                                                    + extra force                      (Update_Extra_Force)
    neighbor                    neighbor
 */

struct Particle
{
    vec4 position;

    vec4 velocity;

    uvec2 range;
    float density;
    float pressure;

    vec3 force;
    uint neighbor;
};
layout(std430, binding = 2) buffer ParticleBuffer
{
    Particle pData[];
};



// force => 주변에 영향을 받는 힘을 구한다
void Update_Fluid_Force(uint myId)
{
    // force 초기화
    pData[myId].force = vec3(0.0, 0.0, 0.0);

    vec3 PressureForce    = vec3(0.0, 0.0, 0.0);        // 압력에 의한 힘
    vec3 ViscosityForce   = vec3(0.0, 0.0, 0.0);        // 점성에 의한 힘

    vec3 SurfaceNormal    = vec3(0.0, 0.0, 0.0);        // 표면->유체 를 향하는 벡터
    float SurfaceForceMag = 0.0;                        // 표면장력 크기

    // 탐색한 이웃의 수를 체크, neighbor 에 자기 자신이 포함되어 있으므로 1 로 초기화
    uint countCheck = 1;

    // range 범위를 조사, far->near
    for(uint neId = pData[myId].range.x; neId <= pData[myId].range.y; neId++)
    {
        // 논문의 내용을 그대로 적용 => 상대->나, 방향의 벡터를 사용한다
        vec3 relativePos = pData[myId].position.xyz - pData[neId].position.xyz;
        float rSquare = dot(relativePos, relativePos);

        // 영향력 있는 거리 안이다 + 자기 자신에 대한 연산은 제외한다( normalize 에서 에러 발생 )
        if(rSquare != 0 && rSquare < hSquare)
        {
            // 영향을 주는 파티클을 하나 만났다
            countCheck += 1;

            float rLength = length(relativePos);
            vec3 unitRelativePos = normalize(relativePos);

            /*
                압력에 의한 힘 계산
                => 서로를 밀어내는 힘
                따라서 상대에 의해서, 상대로부터 멀어져야 한다
            */
            PressureForce += (-1) * particleMass * (pData[myId].pressure + pData[neId].pressure) / (2 * pData[neId].density) * Grad_W_Spiky(rLength) * unitRelativePos;

            /* 
                점성에 의한 힘 계산
                서로를 당기는 힘
                내 particle 이 상대 particle 방향으로 이동해야 한다
                현재 입자에서 상대 입자의 속도 방향과 같은 방향을 가진다
            */
            ViscosityForce += viscosity * particleMass * (pData[neId].velocity.xyz - pData[myId].velocity.xyz) / pData[neId].density * Laplace_W_Viscosity(rLength);

            /* 
                Surf Normal
                입자의 바깥-> 유체 내부로 들어가는 벡터
                유체 내부를 향하는 surface normal
             */
            SurfaceNormal += particleMass / pData[neId].density * Grad_W_Poly6(rSquare) * relativePos;

            /* 
                Surface Force Magnitude
                입자에 작용하는 표면 장력의 크기
                표면 장력이 존재한다면, 이 크기를 가진다
                방향은 surface normal 과 같다
             */
            SurfaceForceMag += particleMass / pData[neId].density * Laplace_W_Poly6(rSquare);
        }

        // 혹시 영향을 주는 파티클을 모두 만났으면, 더이상 검색할 필요 없다
        if(countCheck >= pData[myId].neighbor) break;
    }

    // 압력, 점성에 의한 힘 저장
    pData[myId].force = (PressureForce + ViscosityForce);

    // surface normal 이 일정 크기 이상이면, 표면 장력을 더한다
    if( length(SurfaceNormal) > threshold )
        pData[myId].force += (-1) * surfCoeffi * SurfaceForceMag * normalize(SurfaceNormal);
}   



// 2. 주변 particle 에 관계없이 계산되는 힘
void Add_Extra_Force(uint myId)
{
    vec3 ExtraForce = vec3(0, 0, 0);
    float curDensity = pData[myId].density;

    // 중력에 의한 힘
    // 나비에 스톡스 방정식에 의해 ~ 밀도 사용 // 나도 2000 정도 곱해줘야 하나??
    ExtraForce += gravityAcel * curDensity;


    // 마우스에 의한 힘
    ExtraForce += vec3(-mouseForce.x, 0, -mouseForce.y) * 1.0;


    // // 파도의 의한 힘
    // vec3 waveF = vec3(0, sin(pData[myId].position.x / xRange * PI + time), 0);
    // waveF *= (1 - pData[myId].position.y / yRange) * wavePower;
    // ExtraForce += waveF;

    // 추가적인 힘을 더해 저장
    pData[myId].force += ExtraForce;
}



void main()
{
    // ssbo 에 접근하는 스레드의 인덱스
    uint index = gl_GlobalInvocationID.x;

    // 1. 영향을 받는 힘을 구하고
    Update_Fluid_Force(index);


    // 2. 영향을 안 받는 힘을 구한다
    Add_Extra_Force(index);
}